apply plugin: "com.android.library"
apply plugin: "me.tatarka.retrolambda"
apply from: "../quality/quality.gradle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        abortOnError !project.hasProperty('notAbortOnError')
    }
}

dependencies {

    compile fileTree(dir: "libs", include: ["*.jar"])
    // support libraries
    compile coreDeps.appcompat
    compile(coreDeps.recyclerview) {
        exclude module: "support-v4"
    }
    compile coreDeps.design
    // Butterknife library to ease the access to inject views in activities and fragments
    compile coreDeps.butterknife
    annotationProcessor coreDeps.buttercompiler
    // RxJava and RxAndroid libraries
    compile coreDeps.rxjava
    compile(coreDeps.rxandroid) {
        exclude module: "rxjava"
    }
    // Retrolambda library
    retrolambdaConfig coreDeps.retrolambda
    // Dagger 2 dependency injector requirements
    annotationProcessor coreDeps.daggercompiler
    compile coreDeps.dagger
    provided "javax.annotation:jsr250-api:1.0"

    // Timber logger library
    compile coreDeps.timber
    // Retrofit Library
    compile coreDeps.retrofit
    // GSON converter for retrofit
    compile(coreDeps.retrogson) {
        exclude module: "retrofit"
    }
    // RXJava adapter for retrofit
    compile(coreDeps.retrorxjava) {
        exclude module: "retrofit"
    }
    compile(coreDeps.okinterceptor) {
        exclude module: "retrofit"
    }

    // Add test dependencies
    testCompile coreTestDeps.junit
    testCompile coreTestDeps.robolectric
    testCompile coreTestDeps.mockito
    testCompile coreTestDeps.assertj
    // Powermock to mock static dependencies
    testCompile coreTestDeps.powermockJunit
    testCompile coreTestDeps.powermockRule
    testCompile coreTestDeps.powermockMockito
    testCompile coreTestDeps.powermockXtream
}
