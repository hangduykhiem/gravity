# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version

# Usage examples:
# fastlane --verbose --env ci test build_url:$BUILD_URL build_number:$BUILD_NUMBER adb:$ADB_PATH
# Runs test action for CI environment, with injected build_url from jenkins providing also the ADB path
#
# fastlane --verbose --env ci instrumentationtest build_url:$BUILD_URL build_number:$BUILD_NUMBER adb:$ADB_PATH
# Runs instrumentation tests action for CI environment, with injected build_url from jenkins providing also the ADB path

fastlane_version "1.64.0"

default_platform :android

platform :android do
  before_all do

    $environment = ENV["ENVIRONMENT"]

    # Always clear environment
    gradle(task: 'clean')

  end

  desc "Runs all unit tests"
  lane :test do
    gradle(task: 'test', flags: '--stacktrace')
  end

  desc "Runs all instrumentation tests"
  lane :instrumentationtest do |options|

    $adb_path = options[:adb]

    # Wake up the screen
    adb(adb_path: $adb_path, command: 'shell input keyevent KEYCODE_WAKEUP')

    # Uninstall previous app
    gradle(task: 'uninstallAll')

    # Run the tests
    gradle(task: ENV["TEST_INSTRUMENTATION_TASK"], flags: '--stacktrace')

  end

  after_all do |lane, options|

    $build_number = options[:build_number]

    if lane.to_s == "test"
        hipchat(from: "MsJenkins", message: "#{$environment}-#{$build_number}: Android core library successfully Unit Tested!", custom_color: "yellow" , channel: "Fleek%20Android", success: true)
    end

    if lane.to_s == "instrumentationtest"

        # Send message to hipchat
        hipchat(from: "MsJenkins", message: "#{$environment}-#{$build_number}: Android core library successfully Tested!", channel: "Fleek%20Android", success: true)

        # Adds tag to git
        add_git_tag(tag: "#{$environment}-#{$build_number}")
        push_git_tags # push tag

        # Say built was successful
        say "Android Core Library `#{$environment}` Build #{$build_number} Successful"

    end

  end

  error do |lane, exception, options|

    if lane.to_s == "test"
        hipchat(from: "MsJenkins", message_format:"html", message: $environment + ": Android core unit test failed... WEAR THE HAT! <a href="+options[:build_url]+">ERROR LOG</a>", channel: "Fleek%20Android", success: false)
    end

    if lane.to_s == "instrumentationtest"
       hipchat(from: "MsJenkins", message_format:'html', message: $environment + ": Android core instrumentation test failed... <a href="+options[:build_url]+">ERROR LOG</a>", channel: "Fleek%20Android", success: false)
    end

  end
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
